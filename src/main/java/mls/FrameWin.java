/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mls;

import java.awt.Color;
import java.text.DecimalFormat;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import mls.generatori.Generatore3Erlangiano;
import mls.generatori.GeneratoreEsponenziale;
import mls.generatori.GeneratorePoissoniano;
import mls.generatori.GeneratoreUniforme;
import mls.util.Coda;
import mls.util.CodaFIFO;
import mls.util.CodaLIFO;
import mls.util.CodaSPTF;
import mls.util.Generatore;
import mls.util.JobComparator;
import mls.util.TipoEvento;

/**
 *
 * @author Michele Milidoni <michelemilidoni@gmail.com>
 */
public class FrameWin extends javax.swing.JFrame {

    private Calendario calendario;
    private Coda<Job> cpuQueue;
    private Coda<Job> ioQueue;

    private Generatore genArrivi;
    private Generatore genCentroCpu;
    private Generatore genCentroCpu2;
    private Generatore genCentroIo;
    private GeneratoreUniforme genRouting;
    private Job jobCorrenteCpu;
    private Job jobCorrenteCpu2;
    private Job jobCorrenteIO;
    private int pRun, runStatisticiRimanenti;
    private final int passo = 1;
    private int nOsservazioni, nRun = 0, nOsservazioniEffettuate = 0, n0 = 0;
    private double tempiRispostaStab[];
    private double tempiRispostaStat[];
    private double en[];
    private double vc[];
    private double x[];
    private double y[], nOsservazioniEffettuateStat[];
    private boolean stopSequenziatore = false;
    private boolean stabile = false;
    private boolean convalida = false;

    private final DecimalFormat df;
    private String testoOut = "";
    private boolean fineSimulazione = false;
    private boolean singolaCPU = true;

    private final Semaphore semaforo;

    private final double semeArrivi = 229;
    private final double semeCentroCpu = 233;
    private final double semeCentroCpu2 = 255;
    private final double semeCentroIo = 283;
    private final double semeRouting = 227;
    private double semeArriviStabile;
    private double semeCentroCpuStabile;
    private double semeCentroCpu2Stabile;
    private double semeCentroIoStabile;
    private double semeRoutingStabile;

    /**
     * Creates new form FrameWin
     */
    public FrameWin() {
        initComponents();
        buttonAvvia.setEnabled(true);
        buttonConvalida.setEnabled(true);
        buttonStabile.setEnabled(false);
        df = new DecimalFormat("#.####");
        semaforo = new Semaphore(1);
        jRadioButton1.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        textTa = new javax.swing.JFormattedTextField();
        buttonAvvia = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textP = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        textTsCpu = new javax.swing.JFormattedTextField();
        buttonConvalida = new javax.swing.JButton();
        textTsIO = new javax.swing.JFormattedTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextPane();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        buttonStabile = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        framePlot1 = new mls.FramePlot();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        textPuntoCentrale = new javax.swing.JTextField();
        textLimiteSuperiore = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        textLimiteInferiore = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        textGeneratoreCentri = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        textCodaCPU = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textGeneratoreArrivi = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textCodaIO = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Milidoni MLS Parte2");
        setBackground(new java.awt.Color(254, 254, 254));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Sistema simulato");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        textTa.setText("30");
        textTa.setToolTipText("Tempo di arrivo");

        buttonAvvia.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        buttonAvvia.setText("Simula");
        buttonAvvia.setToolTipText("");
        buttonAvvia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAvviaActionPerformed(evt);
            }
        });

        jLabel4.setText("Ta");

        jLabel6.setText("Run di stab. (p)");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel3.setText("Configurazione");

        textP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textP.setText("30");
        textP.setToolTipText("Run di stabilizzazione");
        textP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPActionPerformed(evt);
            }
        });

        jLabel5.setText("Ts CPU / IO");

        textTsCpu.setText("2");
        textTsCpu.setToolTipText("Tempo di servizio CPU");
        textTsCpu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTsCpuActionPerformed(evt);
            }
        });

        buttonConvalida.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        buttonConvalida.setText("Convalida");
        buttonConvalida.setToolTipText("");
        buttonConvalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConvalidaActionPerformed(evt);
            }
        });

        textTsIO.setText("2");
        textTsIO.setToolTipText("Tempo di servizio I/O");
        textTsIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTsIOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(48, 48, 48))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(buttonAvvia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textTa)
                    .addComponent(textP)
                    .addComponent(buttonConvalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textTsCpu, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textTsIO))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textTsCpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textTsIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAvvia, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(buttonConvalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Log");

        textOutput.setEditable(false);
        textOutput.setFont(new java.awt.Font("Andale Mono", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(textOutput);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("1 CPU");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("2 CPU");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonStabile.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        buttonStabile.setText("AVVIA FASE STATISTICA");
        buttonStabile.setToolTipText("");
        buttonStabile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStabileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonStabile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonStabile)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Grafici");

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        textPuntoCentrale.setEditable(false);
        textPuntoCentrale.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        textLimiteSuperiore.setEditable(false);
        textLimiteSuperiore.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel13.setText("Limite inferiore:");

        jLabel15.setText("Limite superiore:");

        jLabel14.setText("Punto centrale:");

        textLimiteInferiore.setEditable(false);
        textLimiteInferiore.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textPuntoCentrale, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(textLimiteSuperiore)
                    .addComponent(textLimiteInferiore, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textLimiteInferiore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(textPuntoCentrale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(textLimiteSuperiore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textGeneratoreCentri.setEditable(false);

        jLabel10.setText("Tipo generatore centri:");

        jLabel12.setText("Tipo coda I/O:");

        textCodaCPU.setEditable(false);

        jLabel11.setText("Tipo coda CPU:");

        textGeneratoreArrivi.setEditable(false);

        jLabel9.setText("Tipo generatore arrivi:");

        textCodaIO.setEditable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textGeneratoreArrivi, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(textGeneratoreCentri)
                    .addComponent(textCodaCPU)
                    .addComponent(textCodaIO))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(textGeneratoreArrivi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(textGeneratoreCentri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(textCodaCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(textCodaIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(framePlot1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(framePlot1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStabileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStabileActionPerformed
        try {
            semaforo.acquire();
            setStabile();
//            buttonAvvia.setEnabled(false);
//            buttonConvalida.setEnabled(false);
            buttonStabile.setEnabled(false);
            buttonStabile.setText("CALCOLO IN CORSO");
            semaforo.release();
        } catch (InterruptedException ex) {
            Logger.getLogger(FrameWin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonStabileActionPerformed

    private void buttonConvalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConvalidaActionPerformed
        convalida = true;
        SwingWorker worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                try {
                    avviaSimulazione(Integer.parseInt(textP.getText()),
                            Double.parseDouble(textTa.getText()),
                            Double.parseDouble(textTsCpu.getText()),
                            Double.parseDouble(textTsIO.getText())
                    );
                } catch (Exception e) {
                    Logger.getLogger(FrameWin.class
                            .getName()).log(Level.SEVERE, null, e);
                }
                return true;
            }
        };

//        buttonAvvia.setEnabled(false);
//        buttonConvalida.setEnabled(false);
        buttonStabile.setEnabled(true);
        worker.execute();
    }//GEN-LAST:event_buttonConvalidaActionPerformed

    private void textTsCpuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTsCpuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTsCpuActionPerformed

    private void textPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPActionPerformed

    private void buttonAvviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAvviaActionPerformed

        convalida = false;
        SwingWorker worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                try {
                    avviaSimulazione(Integer.parseInt(textP.getText()),
                            Double.parseDouble(textTa.getText()),
                            Double.parseDouble(textTsCpu.getText()),
                            Double.parseDouble(textTsIO.getText())
                    );
                } catch (Exception e) {
                    Logger.getLogger(FrameWin.class
                            .getName()).log(Level.SEVERE, null, e);
                }
                return true;
            }
        };

//        buttonAvvia.setEnabled(false);
//        buttonConvalida.setEnabled(false);
        buttonStabile.setEnabled(true);
        worker.execute();
    }//GEN-LAST:event_buttonAvviaActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        singolaCPU = true;
        textTsCpu.setText("2");
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schema1.png")));
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        singolaCPU = false;
        textTsCpu.setText("4");
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schema2.png")));
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void textTsIOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTsIOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTsIOActionPerformed

    public void avviaSimulazione(int pRun, double Ta, double TsCPU, double TsIO) {
        textLimiteInferiore.setText("");
        textLimiteSuperiore.setText("");
        textPuntoCentrale.setText("");

        textOutput.setText("");
        testoOut = "-> INIZIO SIMULAZIONE <-\n";
        int nMax = 4000;
        genRouting = new GeneratoreUniforme(semeRouting);
        if (convalida) {
            genArrivi = new GeneratorePoissoniano(Ta, new GeneratoreUniforme(semeArrivi));
            genCentroCpu = new GeneratoreEsponenziale(TsCPU, new GeneratoreUniforme(semeCentroCpu));
            genCentroCpu2 = new GeneratoreEsponenziale(TsCPU, new GeneratoreUniforme(semeCentroCpu2));
            genCentroIo = new GeneratoreEsponenziale(TsIO, new GeneratoreUniforme(semeCentroIo));
        } else {
            genArrivi = new GeneratoreEsponenziale(Ta, new GeneratoreUniforme(semeArrivi));
            genCentroCpu = new Generatore3Erlangiano(TsCPU, semeCentroCpu);
            genCentroCpu2 = new Generatore3Erlangiano(TsCPU, semeCentroCpu2);
            genCentroIo = new Generatore3Erlangiano(TsIO, semeCentroIo);
        }

        statoIniziale();

        textGeneratoreArrivi.setText(genArrivi.getClass().getName());
        textGeneratoreCentri.setText(genCentroCpu.getClass().getName());
        textCodaCPU.setText(cpuQueue.getClass().getName());
        textCodaIO.setText(ioQueue.getClass().getName());

        en = new double[nMax];
        vc = new double[nMax];
        fineSimulazione = false;
        nRun = 0;
        nOsservazioniEffettuate = 0;
        stabile = false;
        stopSequenziatore = false;

        this.pRun = pRun;
        tempiRispostaStab = new double[pRun];
        testoOut += "-> stabilizzazione run: " + pRun + " <- \n";
        framePlot1.resetSerieMedia();
        framePlot1.resetSerieVarianza();
        for (int n = passo; n <= nMax && !fineSimulazione && !stabile; n += passo) {
            setnOsservazioni(n);
            sequenziatore();
        }
    }

    private void statoIniziale() {
        if (convalida) {
            cpuQueue = new CodaFIFO<>();
            ioQueue = new CodaFIFO<>();
        } else {
            cpuQueue = new CodaSPTF<>(new JobComparator());
            ioQueue = new CodaLIFO<>();
        }

        genArrivi.setSeme(semeArrivi);
        genCentroCpu.setSeme(semeCentroCpu);
        genCentroCpu2.setSeme(semeCentroCpu2);
        genCentroIo.setSeme(semeCentroIo);
        genRouting.setSeme(semeRouting);

        calendario = new Calendario();
        calendario.addArrivo(genArrivi.next());
        jobCorrenteCpu = null;
        jobCorrenteCpu2 = null;
        jobCorrenteIO = null;
        nOsservazioniEffettuate = 0;
    }

    private void sequenziatore() {
        while (!stopSequenziatore) {
            Evento e = calendario.next();
            if (null != e.getTipo()) {
                switch (e.getTipo()) {
                    case ARRIVO:
                        if (singolaCPU) {
                            arrivo();
                        } else {
                            arrivo2CPU();
                        }
                        break;
                    case FINE_CPU:
                        fineCPU();
                        break;
                    case FINE_CPU2:
                        fineCPU2();
                        break;
                    case FINE_IO:
                        if (singolaCPU) {
                            fineIO();
                        } else {
                            fineIO2CPU();
                        }
                        break;
                    case FINE_SIMULAZIONE:
                        fineSimulazione();
                        break;
                    default:
                        break;
                }
            }
        }
    }

    private void arrivo() {
        calendario.addArrivo(genArrivi.next());

        Job job = new Job();
        job.setTempoArrivo(calendario.getClock());
        job.setTempoProcessamento(genCentroCpu.next());

        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = job;
            calendario.addCpu(jobCorrenteCpu.getTempoProcessamento());
        } else {
            cpuQueue.metti(job);
        }
    }

    private void arrivo2CPU() {
        calendario.addArrivo(genArrivi.next());

        Job job = new Job();
        job.setTempoArrivo(calendario.getClock());

        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = job;
            jobCorrenteCpu.setTempoProcessamento(genCentroCpu.next());
            calendario.addCpu(jobCorrenteCpu.getTempoProcessamento());
        } else if (jobCorrenteCpu2 == null) {
            jobCorrenteCpu2 = job;
            jobCorrenteCpu2.setTempoProcessamento(genCentroCpu2.next());
            calendario.addCpu2(jobCorrenteCpu2.getTempoProcessamento());
        } else {
            cpuQueue.metti(job);
        }
    }

    private void fineCPU() {
        double routing = genRouting.next();
        if (routing < 0.9) {
            Job temp = jobCorrenteCpu.clona();
            jobCorrenteCpu = null;
            if (jobCorrenteIO == null) {
                jobCorrenteIO = temp;
                jobCorrenteIO.setTempoProcessamento(genCentroIo.next());
                calendario.addIo(jobCorrenteIO.getTempoProcessamento());
            } else {
                ioQueue.metti(temp);
            }

        } else {
            try {
                semaforo.acquire();
            } catch (InterruptedException ex) {
                Logger.getLogger(FrameWin.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            jobCorrenteCpu.setTempoUscita(calendario.getClock());
            if (!stabile) {
                tempiRispostaStab[nRun++] += jobCorrenteCpu.getTempoRisposta();
                jobCorrenteCpu = null;

                if (nRun == pRun) {
                    nOsservazioniEffettuate++;
                    if (nOsservazioniEffettuate == nOsservazioni) {
                        testoOut += "  Osservazioni: " + nOsservazioni + "\n";

                        double temp = 0;
                        for (int jj = 0; jj < pRun; jj++) {
                            temp += tempiRispostaStab[jj] / nOsservazioni;
                        }
                        en[nOsservazioni - 1] = temp / pRun;
                        testoOut += "   E(" + nOsservazioni + "): " + df.format(en[nOsservazioni - 1]) + "\n";

                        double temp2 = 0;
                        for (int jj = 0; jj < pRun; jj++) {
                            temp2 += Math.pow(tempiRispostaStab[jj] / nOsservazioni - en[nOsservazioni - 1], 2);
                        }
                        vc[nOsservazioni - 1] = temp2 / (pRun - 1);
                        testoOut += "   s^2(" + nOsservazioni + "): " + df.format(vc[nOsservazioni - 1]) + "\n";

                        framePlot1.addSerieMedia(nOsservazioni - 1, en[nOsservazioni - 1]);
                        framePlot1.addSerieVarianza(nOsservazioni - 1, vc[nOsservazioni - 1]);

                        nRun = 0;

                        tempiRispostaStab = new double[pRun];

                        statoIniziale();
                        stopSequenziatore = true;
                    } else {
                        nRun = 0;
                    }
                }
            } else {
                if (nOsservazioniEffettuateStat[nRun] < osservazioniStatistiche[nRun]) {
                    nOsservazioniEffettuateStat[nRun]++;
                    tempiRispostaStat[nRun] += jobCorrenteCpu.getTempoRisposta();
                    jobCorrenteCpu = null;
                    if (nOsservazioniEffettuateStat[nRun] == osservazioniStatistiche[nRun]) {
                        runStatisticiRimanenti--;
                    }
                }
                nRun = (nRun + 1) % pRun;
                if (runStatisticiRimanenti == 0) {
                    calendario.setSimulazione(new Evento(calendario.getClock(), TipoEvento.FINE_SIMULAZIONE));
                } else {
                    statoEquilibrio();
                }
            }
            semaforo.release();
        }
        jobCorrenteCpu = null;

        if (!cpuQueue.isEmpty()) {
            jobCorrenteCpu = (Job) cpuQueue.togli();
            jobCorrenteCpu.setTempoProcessamento(genCentroCpu.next());
            calendario.addCpu(jobCorrenteCpu.getTempoProcessamento());
        } else {
            calendario.resetCpu();
        }
    }

    private void fineCPU2() {
        double routing = genRouting.next();
        if (routing < 0.9) {
            Job temp = jobCorrenteCpu2.clona();
            jobCorrenteCpu2 = null;
            if (jobCorrenteIO == null) {
                jobCorrenteIO = temp;
                jobCorrenteIO.setTempoProcessamento(genCentroIo.next());
                calendario.addIo(jobCorrenteIO.getTempoProcessamento());
            } else {
                ioQueue.metti(temp);
            }

        } else {
            try {
                semaforo.acquire();
            } catch (InterruptedException ex) {
                Logger.getLogger(FrameWin.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            jobCorrenteCpu2.setTempoUscita(calendario.getClock());
            if (!stabile) {
                tempiRispostaStab[nRun++] += jobCorrenteCpu2.getTempoRisposta();
                jobCorrenteCpu2 = null;

                if (nRun == pRun) {
                    nOsservazioniEffettuate++;
                    if (nOsservazioniEffettuate == nOsservazioni) {
                        testoOut += "  Osservazioni: " + nOsservazioni + "\n";

                        double temp = 0;
                        for (int jj = 0; jj < pRun; jj++) {
                            temp += tempiRispostaStab[jj] / nOsservazioni;
                        }
                        en[nOsservazioni - 1] = temp / pRun;
                        testoOut += "   E(" + nOsservazioni + "): " + df.format(en[nOsservazioni - 1]) + "\n";

                        double temp2 = 0;
                        for (int jj = 0; jj < pRun; jj++) {
                            temp2 += Math.pow(tempiRispostaStab[jj] / nOsservazioni - en[nOsservazioni - 1], 2);
                        }
                        vc[nOsservazioni - 1] = temp2 / (pRun - 1);
                        testoOut += "   s^2(" + nOsservazioni + "): " + df.format(vc[nOsservazioni - 1]) + "\n";

                        framePlot1.addSerieMedia(nOsservazioni - 1, en[nOsservazioni - 1]);
                        framePlot1.addSerieVarianza(nOsservazioni - 1, vc[nOsservazioni - 1]);

                        nRun = 0;

                        tempiRispostaStab = new double[pRun];

                        statoIniziale();
                    } else {
                        nRun = 0;
                    }
                }
            } else {
                nOsservazioniEffettuateStat[nRun]++;
                if (nOsservazioniEffettuateStat[nRun] < osservazioniStatistiche[nRun]) {
                    tempiRispostaStat[nRun] += jobCorrenteCpu2.getTempoRisposta();
                    nRun = (nRun + 1) % pRun;
                    jobCorrenteCpu2 = null;
                    stopSequenziatore = true;
                } else {
                    runStatisticiRimanenti--;
                }

                if (runStatisticiRimanenti == 0) {
                    calendario.setSimulazione(new Evento(calendario.getClock(), TipoEvento.FINE_SIMULAZIONE));
                } else {
                    statoEquilibrio();
                }
            }
            semaforo.release();
        }
        jobCorrenteCpu2 = null;

        if (!cpuQueue.isEmpty()) {
            jobCorrenteCpu2 = (Job) cpuQueue.togli();
            jobCorrenteCpu2.setTempoProcessamento(genCentroCpu2.next());
            calendario.addCpu2(jobCorrenteCpu2.getTempoProcessamento());
        } else {
            calendario.resetCpu2();
        }
    }

    private void fineIO() {
        Job temp = jobCorrenteIO.clona();
        jobCorrenteIO = null;
        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = temp;
            jobCorrenteCpu.setTempoProcessamento(genCentroCpu.next());
            calendario.addCpu(jobCorrenteCpu.getTempoProcessamento());
        } else {
            cpuQueue.metti(temp);
        }

        if (!ioQueue.isEmpty()) {
            jobCorrenteIO = (Job) ioQueue.togli();
            jobCorrenteIO.setTempoProcessamento(genCentroIo.next());
            calendario.addIo(jobCorrenteIO.getTempoProcessamento());
        } else {
            calendario.resetIo();
        }
    }

    private void fineIO2CPU() {
        Job temp = jobCorrenteIO.clona();
        jobCorrenteIO = null;
        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = temp;
            jobCorrenteCpu.setTempoProcessamento(genCentroCpu.next());
            calendario.addCpu(jobCorrenteCpu.getTempoProcessamento());
        } else if (jobCorrenteCpu2 == null) {
            jobCorrenteCpu2 = temp;
            jobCorrenteCpu2.setTempoProcessamento(genCentroCpu2.next());
            calendario.addCpu2(jobCorrenteCpu2.getTempoProcessamento());
        } else {
            cpuQueue.metti(temp);
        }

        if (!ioQueue.isEmpty()) {
            jobCorrenteIO = (Job) ioQueue.togli();
            jobCorrenteIO.setTempoProcessamento(genCentroIo.next());
            calendario.addIo(jobCorrenteIO.getTempoProcessamento());
        } else {
            calendario.resetIo();
        }
    }

    private void fineSimulazione() {
        stopSequenziatore = true;
        double xSegn = 0;
        double ySegn = 0;
        x = tempiRispostaStat;
        y = osservazioniStatistiche;
        for (int jj = 0; jj < pRun; jj++) {
            xSegn += x[jj];
            ySegn += y[jj];
        }
        xSegn /= pRun;
        ySegn /= pRun;

        double xSommaQDiff = 0;
        double ySommaQDiff = 0;
        double xySommaQDiff = 0;
        for (int jj = 0; jj < pRun; jj++) {
            xSommaQDiff += Math.pow(x[jj] - xSegn, 2);
            ySommaQDiff += Math.pow(y[jj] - ySegn, 2);
            xySommaQDiff += (x[jj] - xSegn) * (y[jj] - ySegn);
        }

        double s2_11 = xSommaQDiff / (pRun - 1);
        double s2_22 = ySommaQDiff / (pRun - 1);
        double s2_12 = xySommaQDiff / (pRun - 1);

        double f = xSegn / ySegn;
        double s2 = s2_11 - 2 * f * s2_12 + f * f * s2_22;
        double d = Math.sqrt(s2) / (ySegn * Math.sqrt(pRun));
        double mediaInferiore = f - d * 1.645;
        double mediaSuperiore = f + d * 1.645;

        framePlot1.addMarker(f, Color.GREEN);
        framePlot1.addMarker(mediaInferiore, Color.RED);
        framePlot1.addMarker(mediaSuperiore, Color.RED);
        testoOut += "Int. confidenza (u1, u2): (" + df.format(mediaInferiore) + ", " + df.format(mediaSuperiore) + ")\n";
        testoOut += "-> FINE SIMULAZIONE <-\n";
        textOutput.setText(testoOut);
        textLimiteInferiore.setText(df.format(mediaInferiore));
        textLimiteSuperiore.setText(df.format(mediaSuperiore));
        textPuntoCentrale.setText(df.format(f));

        buttonAvvia.setEnabled(true);
        buttonConvalida.setEnabled(true);
        buttonStabile.setEnabled(false);
        buttonStabile.setText("AVVIA FASE STATISTICA");
        stopSequenziatore = true;
        fineSimulazione = true;
    }

    private double osservazioniStatistiche[];

    public void setStabile() {
        n0 = nOsservazioni;
        pRun = 80;
        nRun = 0;
        tempiRispostaStat = new double[pRun];
        osservazioniStatistiche = new double[pRun];
        for (int i = 0; i < pRun; i++) {
            osservazioniStatistiche[i] = genRouting.next(70, 120);
        }

        runStatisticiRimanenti = pRun;
        testoOut += "-> fase stat n0: " + n0 + " <-\n";
        x = new double[pRun];
        y = new double[pRun];
        nOsservazioniEffettuateStat = new double[pRun];

        semeArriviStabile = genArrivi.getSeme();
        semeCentroCpuStabile = genCentroCpu.getSeme();
        semeCentroCpu2Stabile = genCentroCpu2.getSeme();
        semeCentroIoStabile = genCentroIo.getSeme();
        semeRoutingStabile = genRouting.getSeme();

        this.stabile = true;
        statoEquilibrio();
    }

    private void statoEquilibrio() {
        // impostare i semi sei generatori per ogni run
        setnOsservazioni((int) osservazioniStatistiche[nRun]);
        nOsservazioniEffettuate = 0;
        /*
        genArrivi.setSeme(semeArriviStabile);
        genCentroCpu.setSeme(semeCentroCpuStabile);
        genCentroCpu2.setSeme(semeCentroCpu2Stabile);
        genCentroIo.setSeme(semeCentroIoStabile);
        genRouting.setSeme(semeRoutingStabile);
        */

    }

    public void setnOsservazioni(int nOsservazioni) {
        this.nOsservazioni = nOsservazioni;
        stopSequenziatore = false;
    }

    /**
     * @param args the command line arguments
     * @throws java.lang.Exception
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        /*
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
         */

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrameWin().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAvvia;
    private javax.swing.JButton buttonConvalida;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonStabile;
    private mls.FramePlot framePlot1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField textCodaCPU;
    private javax.swing.JTextField textCodaIO;
    private javax.swing.JTextField textGeneratoreArrivi;
    private javax.swing.JTextField textGeneratoreCentri;
    private javax.swing.JTextField textLimiteInferiore;
    private javax.swing.JTextField textLimiteSuperiore;
    private javax.swing.JTextPane textOutput;
    private javax.swing.JFormattedTextField textP;
    private javax.swing.JTextField textPuntoCentrale;
    private javax.swing.JFormattedTextField textTa;
    private javax.swing.JFormattedTextField textTsCpu;
    private javax.swing.JFormattedTextField textTsIO;
    // End of variables declaration//GEN-END:variables
}
