/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mls;

import java.awt.Color;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import mls.generatori.Generatore3Erlangiano;
import mls.generatori.GeneratoreEsponenziale;
import mls.generatori.GeneratoreUniforme;
import mls.util.Clona;
import mls.util.EventoComparator;
import mls.util.JobComparator;
import mls.util.TipoEvento;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Michele Milidoni <michelemilidoni@gmail.com>
 */
public class FrameWin extends javax.swing.JFrame {

    private PriorityQueue<Evento> calendario;
    private PriorityQueue<Job> cpuQueue;
    private Stack<Job> ioQueue;
//    private int clock;
    private GeneratoreEsponenziale genExp;
    private GeneratoreUniforme genUni;
    private Generatore3Erlangiano gen3Erl;
    private Job jobCorrenteCpu;
    private Job jobCorrenteIO;
    private int p;
    private int n0, nRun = 0, nOss = 0;
    private double uSommaG[];
    private double en[];
    private double vc[];
    private double x[];
    private double y[];
    private double uSommaStat;
    private boolean stop = false;
    private boolean stabile = false;

    private PriorityQueue<Job> cpuQueueStabile;
    private Stack<Job> ioQueueStabile;
    private PriorityQueue<Evento> calendarioStabile;
    private Job jobCorrenteCpuStabile;
    private Job jobCorrenteIOStabile;

    /**
     * Creates new form FrameWin
     */
    public FrameWin() {
        initComponents();
        /*
        genUni = new GeneratoreUniforme();
        genExp = new GeneratoreEsponenziale(gamma, genUni);
        gen3Erl = new Generatore3Erlangiano(mu, new GeneratoreEsponenziale(mu, genUni));
        this.p = p;
        this.n0 = n0;
        uSommaG = new double[p];
        en = new double[n0];
        vc = new double[n0];
        this.pack();
        RefineryUtilities.centerFrameOnScreen(this);
//        this.frame.setVisible(true);
        statoIniziale();
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        textGamma = new javax.swing.JFormattedTextField();
        buttonAvvia = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textP = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        textLabda = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        framePlot1 = new mls.FramePlot();
        buttonStabile = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Milidoni MLS Parte2");
        setBackground(new java.awt.Color(254, 254, 254));

        jPanel2.setBackground(new java.awt.Color(254, 254, 254));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Sistema simulato");

        jLabel2.setIcon(new javax.swing.ImageIcon("/home/michele/NetBeansProjects/MLS_Milidoni_Finale/src/main/java/mls/schema2.jpg")); // NOI18N

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        textGamma.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textGamma.setText("30");

        buttonAvvia.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        buttonAvvia.setText("Avvia simulazione");
        buttonAvvia.setToolTipText("");
        buttonAvvia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAvviaActionPerformed(evt);
            }
        });

        jLabel4.setText("Gamma");

        jLabel6.setText("Run di stab. (p)");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel3.setText("Configurazione");

        textP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textP.setText("30");
        textP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPActionPerformed(evt);
            }
        });

        jLabel5.setText("Lambda");

        textLabda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textLabda.setText("0.5");
        textLabda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLabdaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(48, 48, 48))
            .addComponent(buttonAvvia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textGamma)
                    .addComponent(textLabda)
                    .addComponent(textP)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textGamma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textLabda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonAvvia, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(589, 589, 589))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 24, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Output");

        buttonStabile.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        buttonStabile.setText("SISTEMA STABILE");
        buttonStabile.setToolTipText("");
        buttonStabile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStabileActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Grafici");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2)
            .addComponent(framePlot1, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(buttonStabile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(framePlot1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStabile, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(231, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textLabdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLabdaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textLabdaActionPerformed

    private void textPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPActionPerformed

    private void buttonAvviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAvviaActionPerformed

        SwingWorker worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                avviaSimulazione(Integer.parseInt(textP.getText()),
                        Double.parseDouble(textGamma.getText()),
                        Double.parseDouble(textLabda.getText()));
                return true;
            }
        };

        worker.execute();

    }//GEN-LAST:event_buttonAvviaActionPerformed

    private void buttonStabileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStabileActionPerformed
        setStabile();
    }//GEN-LAST:event_buttonStabileActionPerformed

    public void avviaSimulazione(int p, double gamma, double mu) {
        int nMax = 10000;
        genUni = new GeneratoreUniforme();
        genExp = new GeneratoreEsponenziale(gamma, genUni);
        gen3Erl = new Generatore3Erlangiano(mu, new GeneratoreEsponenziale(mu, genUni));
        en = new double[nMax];
        vc = new double[nMax];

        this.p = p;
        uSommaG = new double[p];
        for (int n = 1; n <= nMax; n++) {
            statoIniziale();
            setN0(n);
            sequenziatore();
        }

    }

    private void statoIniziale() {
        cpuQueue = new PriorityQueue<>(new JobComparator());
        calendario = new PriorityQueue<>(new EventoComparator());
        ioQueue = new Stack<>();
        jobCorrenteCpu = null;
        jobCorrenteIO = null;
    }

    private void statoEquilibrio() {
        //TODO: implementare lo stato di equilibrio
        cpuQueue = Clona.cpuQueue(cpuQueueStabile);
        calendario = Clona.calendario(calendarioStabile);
        ioQueue = Clona.ioQueue(ioQueueStabile);
        if (jobCorrenteCpuStabile != null) {
            jobCorrenteCpu = jobCorrenteCpuStabile.clona();
        }
        if (jobCorrenteIOStabile != null) {
            jobCorrenteIO = jobCorrenteIOStabile.clona();
        }
        uSommaStat = 0d;
        setN0(genUni.next(50, 100));
        nOss = 0;
    }

    private void setStatoEquilibrio() {
        x = new double[p];
        y = new double[p];
        cpuQueueStabile = Clona.cpuQueue(cpuQueue);
        ioQueueStabile = Clona.ioQueue(ioQueue);
        calendarioStabile = Clona.calendario(calendario);
        if (jobCorrenteCpu != null) {
            jobCorrenteCpuStabile = jobCorrenteCpu.clona();
        }
        if (jobCorrenteIO != null) {
            jobCorrenteIOStabile = jobCorrenteIO.clona();
        }
    }

    public void setN0(int n0) {
        this.n0 = n0;
        stop = false;
        System.out.println("imposto n0 = " + n0);
    }

    private void sequenziatore() {
        while (!stop) {
            if (nRun == p) {
                calendario.add(new Evento(0d, TipoEvento.FINE_SIMULAZIONE));
            }
            calendario.add(new Evento(genExp.next(), TipoEvento.ARRIVO));
            Evento e = calendario.poll();
            if (null != e.getTipo()) {
                switch (e.getTipo()) {
                    case ARRIVO:
                        arrivo();
                        break;
                    case FINE_CPU:
                        fineCPU();
                        break;
                    case FINE_IO:
                        fineIO();
                        break;
                    case FINE_SIMULAZIONE:
                        fineSimulazione();
                        break;
                    default:
                        break;
                }
            }
        }
    }

    private void arrivo() {
        Job job = new Job();
        job.setCarico(gen3Erl.next());
        //System.out.println(" ARRIVO ");
        //System.out.println(job);

        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = job;
            calendario.add(new Evento(job.getCarico(), TipoEvento.FINE_CPU));
            //System.out.println("imposto jobCorrenteCpu");
        } else {
            cpuQueue.add(job);
            //System.out.println("metto il job in cpuQueue");
        }
    }

    private void fineCPU() {
        double routing = genUni.next();
        if (routing <= 0.9) {
            if (jobCorrenteIO == null) {
                jobCorrenteIO = (Job) jobCorrenteCpu.clona();
                jobCorrenteIO.setCarico(gen3Erl.next());
                calendario.add(new Evento(jobCorrenteIO.getCarico(), TipoEvento.FINE_IO));
                //System.out.println("imposto jobCorrenteIO da CPU");
            } else {
                Job temp = jobCorrenteCpu.clona();
                temp.setCarico(gen3Erl.next());
                ioQueue.add(temp);
                //System.out.println("metto il job in ioQueue");
            }

        } else if (!stabile) {
            uSommaG[nRun++] += jobCorrenteCpu.getCarico();

            if (nRun == p) {
                double temp = 0;
                for (int jj = 0; jj < p; jj++) {
                    temp += uSommaG[jj] / n0;
                }
                en[n0 - 1] = temp / p;

                double temp2 = 0;
                for (int jj = 0; jj < p; jj++) {
                    temp2 += Math.pow(uSommaG[jj] / n0 - en[n0 - 1], 2);
                }
                vc[n0 - 1] = temp2 / (p - 1);

//                System.out.println(n0 + "\t" + en[n0 - 1]);
                framePlot1.addSerieMedia(n0 - 1, en[n0 - 1]);
                framePlot1.addSerieVarianza(n0 - 1, vc[n0 - 1]);

                if (n0 % 10 == 0) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FrameWin.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                nRun = 0;
                stop = true;
            }

            statoIniziale();

        } else {
            uSommaStat += jobCorrenteCpu.getCarico();
            nOss++;

            if (nOss == n0) {
                y[nRun] = n0;
                x[nRun] = uSommaStat;
                nRun++;
                stop = true;
                statoEquilibrio();
            }

            if (nRun == p) {
                calendario.add(new Evento(0d, TipoEvento.FINE_SIMULAZIONE));
            }
        }

        jobCorrenteCpu = null;

        if (!cpuQueue.isEmpty()) {
            jobCorrenteCpu = cpuQueue.poll();
            jobCorrenteCpu.setCarico(gen3Erl.next());
            calendario.add(new Evento(jobCorrenteCpu.getCarico(), TipoEvento.FINE_CPU));
            //System.out.println("prelevo un job da cpuQueue");
        }
    }

    private void fineIO() {
        if (jobCorrenteCpu == null) {
            jobCorrenteCpu = (Job) jobCorrenteIO.clona();
            jobCorrenteCpu.setCarico(gen3Erl.next());
            calendario.add(new Evento(jobCorrenteCpu.getCarico(), TipoEvento.FINE_CPU));
            //System.out.println("imposto jobCorrenteCpu da IO");
        } else {
            Job temp = jobCorrenteIO.clona();
            temp.setCarico(gen3Erl.next());
            cpuQueue.add(temp);
            //System.out.println("metto il job in cpuQueue");
        }
        jobCorrenteIO = null;

        if (!ioQueue.isEmpty()) {
            jobCorrenteIO = ioQueue.pop();
            jobCorrenteIO.setCarico(gen3Erl.next());
            calendario.add(new Evento(jobCorrenteIO.getCarico(), TipoEvento.FINE_IO));
            //System.out.println("prelevo un job da ioQueue");
        }
    }

    private void fineSimulazione() {
        double xSegn = 0;
        double ySegn = 0;
        for (int jj = 0; jj < p; jj++) {
            xSegn += x[jj];
            ySegn += y[jj];
        }
        xSegn /= p;
        ySegn /= p;

        double xSommaQDiff = 0;
        double ySommaQDiff = 0;
        double xySommaQDiff = 0;
        for (int jj = 0; jj < p; jj++) {
            xSommaQDiff += Math.pow(x[jj] - xSegn, 2);
            ySommaQDiff += Math.pow(y[jj] - ySegn, 2);
            xySommaQDiff += (x[jj] - xSegn) * (y[jj] - ySegn);
        }

        double s2_11 = xSommaQDiff / (p - 1);
        double s2_22 = ySommaQDiff / (p - 1);
        double s2_12 = xySommaQDiff / (p - 1);

        double f = xSegn / ySegn;
        double s2 = s2_11 - 2 * f * s2_12 + f * f * s2_22;
        double d = Math.sqrt(s2) / (ySegn * Math.sqrt(p));
        double mediaInferiore = f - d * 1.645;
        double mediaSuperiore = f + d * 1.645;

        framePlot1.addMarker(f, Color.GREEN);
        framePlot1.addMarker(mediaInferiore, Color.RED);
        framePlot1.addMarker(mediaSuperiore, Color.RED);
        System.out.println("inf: " + mediaInferiore);
        System.out.println("cen: " + f);
        System.out.println("sup: " + mediaSuperiore);

        stop = true;
        try {
            Thread.sleep(10000);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrameWin.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }

    public void setStabile() {
        p = 40;
        setStatoEquilibrio();
        this.stabile = true;
        statoEquilibrio();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FrameWin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAvvia;
    private javax.swing.JButton buttonStabile;
    private mls.FramePlot framePlot1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JFormattedTextField textGamma;
    private javax.swing.JFormattedTextField textLabda;
    private javax.swing.JFormattedTextField textP;
    // End of variables declaration//GEN-END:variables
}
